service: sample-lambda-app

custom: ${file(conf.json)}

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-southeast-2
  stage: ${opt:stage, 'dev'}

package:
  exclude:
    - scripts/**
    - .serverless/**
    - README.md
    - spec/**
    - .travis.yml
    - node_modules/**  # our code doesn't use any runtime dependency

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /
          method: get
  healthcheck:
    handler: handler.healthcheck
    events:
      - http:
          path: /healthcheck
          method: get
  metadata:
    handler: handler.metadata
    environment:
      GIT_ENV: ${git:sha1}
    events:
      - http:
          path: /metadata
          method: get

plugins:
  - serverless-plugin-git-variables

resources:
  Resources:
   DnsEntry:
     Type: 'AWS::Route53::RecordSet'
     Properties:
       HostedZoneId: ${self:custom.zoneId}
       Name: "${self:provider.stage}.${self:custom.zoneName}"
       Type: "A"
       AliasTarget:
         DNSName: { Fn::GetAtt: [ ApiGatewayDomainName, 'DistributionDomainName'] }
         HostedZoneId: 'Z2FDTNDATAQYW2'    # https://forums.aws.amazon.com/message.jspa?messageID=493441
   ApiGatewayDomainName:
      Type: AWS::ApiGateway::DomainName
      Properties:
        CertificateArn: ${self:custom.certificate}
        DomainName: "${self:provider.stage}.${self:custom.zoneName}"
   ApiGatewayBase:
      Type: "AWS::ApiGateway::BasePathMapping"
      DependsOn: HelloLambdaPermissionApiGateway  #https://github.com/serverless/serverless/issues/2233
      Properties:
        BasePath: ''
        DomainName: "${self:provider.stage}.${self:custom.zoneName}"
        RestApiId:
          Ref: ApiGatewayRestApi
        Stage: ${self:provider.stage}
